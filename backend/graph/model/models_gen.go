// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"bytes"
	"fmt"
	"io"
	"strconv"
)

type Album struct {
	ID          string            `json:"id"`
	SpotifyID   *string           `json:"spotifyID,omitempty"`
	Title       string            `json:"title"`
	Artist      *Artist           `json:"artist"`
	ReleaseDate *string           `json:"releaseDate,omitempty"`
	CoverImage  *string           `json:"coverImage,omitempty"`
	Tracks      *TrackConnection  `json:"tracks"`
	Reviews     *ReviewConnection `json:"reviews"`
}

type AlbumConnection struct {
	TotalCount int32        `json:"totalCount"`
	Edges      []*AlbumEdge `json:"edges"`
	PageInfo   *PageInfo    `json:"pageInfo"`
}

type AlbumDetails struct {
	ID            string            `json:"id"`
	SpotifyID     *string           `json:"spotifyID,omitempty"`
	Title         string            `json:"title"`
	Artist        *Artist           `json:"artist"`
	ReleaseDate   *string           `json:"releaseDate,omitempty"`
	CoverImage    *string           `json:"coverImage,omitempty"`
	Tracks        []*TrackDetails   `json:"tracks"`
	AverageRating *float64          `json:"averageRating,omitempty"`
	TotalReviews  int32             `json:"totalReviews"`
	Reviews       *ReviewConnection `json:"reviews"`
}

type AlbumEdge struct {
	Cursor string `json:"cursor"`
	Node   *Album `json:"node"`
}

type AlbumSearchInput struct {
	Query  string          `json:"query"`
	Limit  *int32          `json:"limit,omitempty"`
	Offset *int32          `json:"offset,omitempty"`
	Source *ExternalSource `json:"source,omitempty"`
}

type AlbumSearchResult struct {
	ID             string                `json:"id"`
	Title          string                `json:"title"`
	Artist         []*ArtistSearchResult `json:"artist"`
	ReleaseDate    *string               `json:"releaseDate,omitempty"`
	CoverImage     *string               `json:"coverImage,omitempty"`
	ExternalSource ExternalSource        `json:"externalSource"`
}

type Artist struct {
	ID        string           `json:"id"`
	SpotifyID *string          `json:"spotifyID,omitempty"`
	Name      string           `json:"name"`
	Albums    *AlbumConnection `json:"albums"`
}

type ArtistDetails struct {
	ID        string   `json:"id"`
	SpotifyID *string  `json:"spotifyID,omitempty"`
	Name      string   `json:"name"`
	Albums    []*Album `json:"albums"`
	TopTracks []*Track `json:"topTracks"`
	Image     *string  `json:"image,omitempty"`
	Followers *int32   `json:"followers,omitempty"`
	Genres    []string `json:"genres"`
}

type ArtistSearchInput struct {
	Query  string          `json:"query"`
	Limit  *int32          `json:"limit,omitempty"`
	Offset *int32          `json:"offset,omitempty"`
	Source *ExternalSource `json:"source,omitempty"`
}

type ArtistSearchResult struct {
	ID             string         `json:"id"`
	Name           string         `json:"name"`
	ExternalSource ExternalSource `json:"externalSource"`
}

type CreatePlaylistInput struct {
	Title       string  `json:"title"`
	Description *string `json:"description,omitempty"`
	CoverImage  *string `json:"coverImage,omitempty"`
}

type CreateReviewInput struct {
	AlbumID    *string `json:"albumId,omitempty"`
	TrackID    *string `json:"trackId,omitempty"`
	Rating     int32   `json:"rating"`
	ReviewText *string `json:"reviewText,omitempty"`
}

type Mutation struct {
}

type PageInfo struct {
	EndCursor   *string `json:"endCursor,omitempty"`
	HasNextPage bool    `json:"hasNextPage"`
}

type Playlist struct {
	ID          string           `json:"id"`
	Title       string           `json:"title"`
	Description *string          `json:"description,omitempty"`
	CoverImage  *string          `json:"coverImage,omitempty"`
	Tracks      *TrackConnection `json:"tracks"`
	Creator     *User            `json:"creator"`
	CreatedAt   string           `json:"createdAt"`
}

type PlaylistConnection struct {
	TotalCount int32           `json:"totalCount"`
	Edges      []*PlaylistEdge `json:"edges"`
	PageInfo   *PageInfo       `json:"pageInfo"`
}

type PlaylistEdge struct {
	Cursor string    `json:"cursor"`
	Node   *Playlist `json:"node"`
}

type Query struct {
}

type Review struct {
	ID         string  `json:"id"`
	User       *User   `json:"user"`
	Album      *Album  `json:"album"`
	Rating     int32   `json:"rating"`
	ReviewText *string `json:"reviewText,omitempty"`
	CreatedAt  string  `json:"createdAt"`
}

type ReviewConnection struct {
	TotalCount int32         `json:"totalCount"`
	Edges      []*ReviewEdge `json:"edges"`
	PageInfo   *PageInfo     `json:"pageInfo"`
}

type ReviewEdge struct {
	Cursor string  `json:"cursor"`
	Node   *Review `json:"node"`
}

type SpotifyAuthURL struct {
	URL   string `json:"url"`
	State string `json:"state"`
}

type SpotifyPlaylist struct {
	ID          string  `json:"id"`
	Name        string  `json:"name"`
	Description *string `json:"description,omitempty"`
	Image       *string `json:"image,omitempty"`
	TrackCount  int32   `json:"trackCount"`
	IsPublic    bool    `json:"isPublic"`
}

type SpotifyPlaylistConnection struct {
	Playlists   []*SpotifyPlaylist `json:"playlists"`
	TotalCount  int32              `json:"totalCount"`
	HasNextPage bool               `json:"hasNextPage"`
}

type SpotifyPlaylistsInput struct {
	Limit  *int32 `json:"limit,omitempty"`
	Offset *int32 `json:"offset,omitempty"`
}

type Subscription struct {
}

type Track struct {
	ID          string  `json:"id"`
	SpotifyID   *string `json:"spotifyID,omitempty"`
	Title       string  `json:"title"`
	Duration    *int32  `json:"duration,omitempty"`
	TrackNumber *int32  `json:"trackNumber,omitempty"`
	Album       *Album  `json:"album"`
}

type TrackConnection struct {
	TotalCount int32        `json:"totalCount"`
	Edges      []*TrackEdge `json:"edges"`
	PageInfo   *PageInfo    `json:"pageInfo"`
}

type TrackDetails struct {
	ID              string    `json:"id"`
	SpotifyID       *string   `json:"spotifyID,omitempty"`
	Title           string    `json:"title"`
	Duration        *int32    `json:"duration,omitempty"`
	TrackNumber     *int32    `json:"trackNumber,omitempty"`
	FeaturedArtists []*Artist `json:"featuredArtists"`
	AverageRating   *float64  `json:"averageRating,omitempty"`
	TotalReviews    int32     `json:"totalReviews"`
}

type TrackEdge struct {
	Cursor string `json:"cursor"`
	Node   *Track `json:"node"`
}

type TrackSearchInput struct {
	Query  string          `json:"query"`
	Limit  *int32          `json:"limit,omitempty"`
	Offset *int32          `json:"offset,omitempty"`
	Source *ExternalSource `json:"source,omitempty"`
}

type TrackSearchResult struct {
	ID             string                `json:"id"`
	Title          string                `json:"title"`
	Duration       *int32                `json:"duration,omitempty"`
	TrackNumber    *int32                `json:"trackNumber,omitempty"`
	Album          *AlbumSearchResult    `json:"album,omitempty"`
	Artists        []*ArtistSearchResult `json:"artists"`
	ExternalSource ExternalSource        `json:"externalSource"`
}

type User struct {
	ID        string              `json:"id"`
	Name      string              `json:"name"`
	Email     string              `json:"email"`
	Bio       *string             `json:"bio,omitempty"`
	Avatar    *string             `json:"avatar,omitempty"`
	Playlists *PlaylistConnection `json:"playlists"`
	Reviews   *ReviewConnection   `json:"reviews"`
}

type ExternalSource string

const (
	ExternalSourceSpotify     ExternalSource = "SPOTIFY"
	ExternalSourceMusicbrainz ExternalSource = "MUSICBRAINZ"
)

var AllExternalSource = []ExternalSource{
	ExternalSourceSpotify,
	ExternalSourceMusicbrainz,
}

func (e ExternalSource) IsValid() bool {
	switch e {
	case ExternalSourceSpotify, ExternalSourceMusicbrainz:
		return true
	}
	return false
}

func (e ExternalSource) String() string {
	return string(e)
}

func (e *ExternalSource) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ExternalSource(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ExternalSource", str)
	}
	return nil
}

func (e ExternalSource) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *ExternalSource) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e ExternalSource) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}
