package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.75

import (
	"context"
	"fmt"
	"time"

	"github.com/daedal00/muse/backend/auth"
	"github.com/daedal00/muse/backend/graph/model"
	jwt "github.com/golang-jwt/jwt/v5"
	"github.com/google/uuid"
	spotifyapi "github.com/zmb3/spotify/v2"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, name string, email string, password string) (*model.User, error) {
	// 1. Hash password
	hash, err := auth.HashPassword(password)
	if err != nil {
		return nil, fmt.Errorf("failed to hash password: %w", err)
	}

	// 2. Generate uuid for user
	id := uuid.New().String()

	// 3. Build GraphQL user model
	user := &model.User{
		ID:    id,
		Name:  name,
		Email: email,
	}

	// 4. Store in memory
	r.users = append(r.users, user)
	r.passwordHashes[id] = hash

	// 5. Return newly created user
	return user, nil
}

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, email string, password string) (string, error) {
	// 1) Lookup user in memory for now
	var found *model.User
	for _, u := range r.users {
		if u.Email == email {
			found = u
			break
		}
	}
	if found == nil {
		return "", fmt.Errorf("invalid credentials")
	}

	// 2) Verify password against stored hash
	hash := r.passwordHashes[found.ID]
	if !auth.VerifyPassword(password, hash) {
		return "", fmt.Errorf("invalid credentials")
	}

	// 3) Sign JWT Token
	claims := auth.CustomClaims{
		UserID: found.ID,
		RegisteredClaims: jwt.RegisteredClaims{
			ExpiresAt: jwt.NewNumericDate(time.Now().Add(24 * time.Hour)),
			IssuedAt:  jwt.NewNumericDate(time.Now()),
			Issuer:    "muse-backend",
		},
	}
	token := jwt.NewWithClaims(jwt.SigningMethodHS256, claims)
	signedToken, err := token.SignedString((auth.JWTSecret))
	if err != nil {
		return "", fmt.Errorf("could not sign token: %w", err)
	}

	// 4) return JWT token
	return signedToken, nil
}

// CreateReview is the resolver for the createReview field.
func (r *mutationResolver) CreateReview(ctx context.Context, input model.CreateReviewInput) (*model.Review, error) {
	// 1) Extract UserID from Context
	raw := ctx.Value(UserIDKey)
	if raw == nil {
		return nil, fmt.Errorf("unauthenciated")
	}
	currentUserID := raw.(string)

	// 2) lookup userID in users
	var reviewer *model.User
	for _, u := range r.users {
		if u.ID == currentUserID {
			reviewer = u
			break
		}
	}
	if reviewer == nil {
		return nil, fmt.Errorf("authenticated user not found in store")
	}

	// 3) Look up *model.Album by supplied input.AlbumID
	var album *model.Album
	for _, a := range r.albums {
		if a.ID == input.AlbumID {
			album = a
			break
		}
	}
	if album == nil {
		return nil, fmt.Errorf("invalid album id (ID=%s)", input.AlbumID)
	}

	// 4) Build Review object
	review := &model.Review{
		ID:         uuid.NewString(),
		User:       reviewer,
		Album:      album,
		Rating:     input.Rating,
		ReviewText: input.ReviewText,
		CreatedAt:  time.Now().Format(time.RFC3339),
	}

	// 5) Store in memory so future queries can view
	r.reviews = append(r.reviews, review)

	// 6) Return newly created review
	return review, nil
}

// CreatePlaylist is the resolver for the createPlaylist field.
func (r *mutationResolver) CreatePlaylist(ctx context.Context, input model.CreatePlaylistInput) (*model.Playlist, error) {
	// 1) Extract UserID from Context
	raw := ctx.Value(UserIDKey)
	if raw == nil {
		return nil, fmt.Errorf("unauthenciated")
	}
	currentUserID := raw.(string)

	// 2) lookup userID in users
	var creator *model.User
	for _, u := range r.users {
		if u.ID == currentUserID {
			creator = u
			break
		}
	}
	if creator == nil {
		return nil, fmt.Errorf("authenticated user not found in store")
	}

	// 3) Create playlist object
	playlist := &model.Playlist{
		ID:          uuid.NewString(),
		Title:       input.Title,
		Description: input.Description,
		CoverImage:  input.CoverImage, // URL stored in S3 bucket
		Creator:     creator,
		CreatedAt:   time.Now().Format(time.RFC3339),
	}

	// 4) store in memory
	r.playlists = append(r.playlists, playlist)

	// 5) Return newly created playlist
	return playlist, nil
}

// AddTrackToPlaylist is the resolver for the addTrackToPlaylist field.
func (r *mutationResolver) AddTrackToPlaylist(ctx context.Context, playlistID string, trackID string) (*model.Playlist, error) {
	panic(fmt.Errorf("not implemented: AddTrackToPlaylist - addTrackToPlaylist"))
}

// Me is the resolver for the me field.
func (r *queryResolver) Me(ctx context.Context) (*model.User, error) {
	// Extract UserID from Context
	raw := ctx.Value(UserIDKey)
	if raw == nil {
		return nil, fmt.Errorf("unauthenticated")
	}
	currentUserID := raw.(string)

	// Look up user in memory store
	for _, u := range r.users {
		if u.ID == currentUserID {
			return u, nil
		}
	}

	return nil, fmt.Errorf("user not found")
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id string) (*model.User, error) {
	// Look up user by ID
	for _, u := range r.users {
		if u.ID == id {
			return u, nil
		}
	}

	return nil, fmt.Errorf("user not found")
}

// Albums is the resolver for the albums field.
func (r *queryResolver) Albums(ctx context.Context, first *int32, after *string) (*model.AlbumConnection, error) {
	panic(fmt.Errorf("not implemented: Albums - albums"))
}

// Album is the resolver for the album field.
func (r *queryResolver) Album(ctx context.Context, id string) (*model.Album, error) {
	panic(fmt.Errorf("not implemented: Album - album"))
}

// Tracks is the resolver for the tracks field.
func (r *queryResolver) Tracks(ctx context.Context, first *int32, after *string) (*model.TrackConnection, error) {
	panic(fmt.Errorf("not implemented: Tracks - tracks"))
}

// Track is the resolver for the track field.
func (r *queryResolver) Track(ctx context.Context, id string) (*model.Track, error) {
	panic(fmt.Errorf("not implemented: Track - track"))
}

// Playlists is the resolver for the playlists field.
func (r *queryResolver) Playlists(ctx context.Context, first *int32, after *string) (*model.PlaylistConnection, error) {
	panic(fmt.Errorf("not implemented: Playlists - playlists"))
}

// Playlist is the resolver for the playlist field.
func (r *queryResolver) Playlist(ctx context.Context, id string) (*model.Playlist, error) {
	panic(fmt.Errorf("not implemented: Playlist - playlist"))
}

// Reviews is the resolver for the reviews field.
func (r *queryResolver) Reviews(ctx context.Context, first *int32, after *string) (*model.ReviewConnection, error) {
	panic(fmt.Errorf("not implemented: Reviews - reviews"))
}

// Review is the resolver for the review field.
func (r *queryResolver) Review(ctx context.Context, id string) (*model.Review, error) {
	panic(fmt.Errorf("not implemented: Review - review"))
}

// SearchAlbums is the resolver for the searchAlbums field.
func (r *queryResolver) SearchAlbums(ctx context.Context, input model.AlbumSearchInput) ([]*model.AlbumSearchResult, error) {
	if r.spotifyServices == nil {
		return nil, fmt.Errorf("Spotify service not available")
	}

	// Set default values for limit if not provided
	limit := 20
	if input.Limit != nil {
		limit = int(*input.Limit)
	}

	// Use the new Spotify client to search for albums
	results, err := r.spotifyServices.Search.SearchAlbums(ctx, input.Query,
		spotifyapi.Limit(limit))
	if err != nil {
		return nil, fmt.Errorf("failed to search albums: %w", err)
	}

	// Convert Spotify results to GraphQL model
	var albumResults []*model.AlbumSearchResult
	if results.Albums != nil {
		for _, album := range results.Albums.Albums {
			// Convert artists
			var artists []*model.ArtistSearchResult
			for _, artist := range album.Artists {
				artists = append(artists, &model.ArtistSearchResult{
					ID:             string(artist.ID),
					Name:           artist.Name,
					ExternalSource: model.ExternalSourceSpotify,
				})
			}

			// Convert release date
			var releaseDate *string
			if album.ReleaseDate != "" {
				releaseDate = &album.ReleaseDate
			}

			// Convert cover image
			var coverImage *string
			if len(album.Images) > 0 {
				coverImage = &album.Images[0].URL
			}

			albumResults = append(albumResults, &model.AlbumSearchResult{
				ID:             string(album.ID),
				Title:          album.Name,
				Artist:         artists,
				ReleaseDate:    releaseDate,
				CoverImage:     coverImage,
				ExternalSource: model.ExternalSourceSpotify,
			})
		}
	}

	return albumResults, nil
}

// SearchArtists is the resolver for the searchArtists field.
func (r *queryResolver) SearchArtists(ctx context.Context, input model.ArtistSearchInput) ([]*model.ArtistSearchResult, error) {
	if r.spotifyServices == nil {
		return nil, fmt.Errorf("spotify service not available")
	}

	// Set default values for limit if not provided
	limit := 20
	if input.Limit != nil {
		limit = int(*input.Limit)
	}

	// Use the new Spotify client to search for artists
	results, err := r.spotifyServices.Search.SearchArtists(ctx, input.Query,
		spotifyapi.Limit(limit))
	if err != nil {
		return nil, fmt.Errorf("failed to search artists: %w", err)
	}

	// Convert Spotify results to GraphQL model
	var artistResults []*model.ArtistSearchResult
	if results.Artists != nil {
		for _, artist := range results.Artists.Artists {
			artistResults = append(artistResults, &model.ArtistSearchResult{
				ID:             string(artist.ID),
				Name:           artist.Name,
				ExternalSource: model.ExternalSourceSpotify,
			})
		}
	}

	return artistResults, nil
}

// ReviewAdded is the resolver for the reviewAdded field.
func (r *subscriptionResolver) ReviewAdded(ctx context.Context, albumID string) (<-chan *model.Review, error) {
	panic(fmt.Errorf("not implemented: ReviewAdded - reviewAdded"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Subscription returns SubscriptionResolver implementation.
func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }
